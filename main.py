# SF-11 Punishment Order Logic
import streamlit as st
import pandas as pd
from datetime import date
from docx import Document
import os
from docx2pdf import convert
import base64

# Load SF-11 Register Data
sf11_df = pd.read_excel("assets/SF-11 Register.xlsx", sheet_name="SSE-SGAM")

# Employee Dropdown
sf11_df["Display"] = sf11_df.apply(
    lambda row: f"{row['рдкреА.рдПрдл. рдХреНрд░рдорд╛рдВрдХ']} - {row['рдХрд░реНрдордЪрд╛рд░реА рдХрд╛ рдирд╛рдо']} - {row['рджрд┐рдирд╛рдВрдХ']} - {row['рдкрддреНрд░ рдХреНрд░.']}", axis=1)
selected_emp = st.selectbox("Select Employee (SF-11 Register):", sf11_df["Display"].tolist())
emp_row = sf11_df[sf11_df["Display"] == selected_emp].iloc[0]

# Letter Date
letter_date = st.date_input("ЁЯУЕ Letter Date", date.today())

# Dropdowns and Text Inputs
reply_received = st.selectbox("рдХреНрдпрд╛ рдХрд░реНрдордЪрд╛рд░реА рд╕реЗ рдкреНрд░рддреНрдпреБрддреНрддрд░ рдкреНрд░рд╛рдкреНрдд рд╣реБрдЖ?", ["рд╣рд╛рдБ", "рдирд╣реАрдВ"])
punishment_options = [
    "рдЖрдЧрд╛рдореА рджреЗрдп рдПрдХ рд╡рд░реНрд╖ рдХреА рд╡реЗрддрди рд╡реГрджреНрдзрд┐ рдЕрд╕рдВрдЪрдпреА рдкреНрд░рднрд╛рд╡ рд╕реЗ рд░реЛрдХреЗ рдЬрд╛рдиреЗ рдХреЗ рдЕрд░реНрдерджрдВрдб рд╕реЗ рджрдВрдбрд┐рдд рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред",
    "рдЖрдЧрд╛рдореА рджреЗрдп рдПрдХ рд╡рд░реНрд╖ рдХреА рд╡реЗрддрди рд╡реГрджреНрдзрд┐ рд╕рдВрдЪрдпреА рдкреНрд░рднрд╛рд╡ рд╕реЗ рд░реЛрдХреЗ рдЬрд╛рдиреЗ рдХреЗ рдЕрд░реНрдерджрдВрдб рд╕реЗ рджрдВрдбрд┐рдд рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред",
    "рдЖрдЧрд╛рдореА рджреЗрдп рдПрдХ рд╕реЗрдЯ рд╕реБрд╡рд┐рдзрд╛ рдкрд╛рд╕ рддрддреНрдХрд╛рд▓ рдкреНрд░рднрд╛рд╡ рд╕реЗ рд░реЛрдХреЗ рдЬрд╛рдиреЗ рдХреЗ рджрдВрдб рд╕реЗ рджрдВрдбрд┐рдд рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред",
    "рдЖрдЧрд╛рдореА рджреЗрдп рдПрдХ рд╕реЗрдЯ PTO рддрддреНрдХрд╛рд▓ рдкреНрд░рднрд╛рд╡ рд╕реЗ рд░реЛрдХреЗ рдЬрд╛рдиреЗ рдХреЗ рджрдВрдб рд╕реЗ рджрдВрдбрд┐рдд рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред",
    "рдЖрдЧрд╛рдореА рджреЗрдп рджреЛ рд╕реЗрдЯ рд╕реБрд╡рд┐рдзрд╛ рдкрд╛рд╕ рддрддреНрдХрд╛рд▓ рдкреНрд░рднрд╛рд╡ рд╕реЗ рд░реЛрдХреЗ рдЬрд╛рдиреЗ рдХреЗ рджрдВрдб рд╕реЗ рджрдВрдбрд┐рдд рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред",
    "рдЖрдЧрд╛рдореА рджреЗрдп рджреЛ рд╕реЗрдЯ PTO рддрддреНрдХрд╛рд▓ рдкреНрд░рднрд╛рд╡ рд╕реЗ рд░реЛрдХреЗ рдЬрд╛рдиреЗ рдХреЗ рджрдВрдб рд╕реЗ рджрдВрдбрд┐рдд рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред"
]
punishment_text = st.selectbox("рджрдВрдб рдХрд╛ рд╡рд┐рд╡рд░рдг рдЪреБрдиреЗрдВ:", punishment_options)
order_date = st.date_input("рджрдгреНтАНрдбрд╛рджреЗрд╢ рдЬрд╛рд░реА рдХрд░рдиреЗ рдХрд╛ рджрд┐рдирд╛рдВрдХ")
appeal_date = st.date_input("рдпрджрд┐ рдЕрдкреАрд▓ рдХреА рдЧрдИ рд╣реЛ, рддреЛ рдЕрдкреАрд▓ рдХрд╛ рджрд┐рдирд╛рдВрдХ", value=None)
appeal_memo = st.text_area("рдЕрдкреАрд▓ рдирд┐рд░реНрдгрдп рдкрддреНрд░ рдХреНрд░. рдПрд╡рдВ рд╕рдВрдХреНрд╖рд┐рдкреНрдд рд╡рд┐рд╡рд░рдг", "")
remarks = st.text_area("рд░рд┐рдорд╛рд░реНрдХ (рдпрджрд┐ рдХреЛрдИ рд╣реЛ)", "")

# Prepare Context
context = {
    "LetterDate": letter_date.strftime("%d-%m-%Y"),
    "Name": emp_row["рдХрд░реНрдордЪрд╛рд░реА рдХрд╛ рдирд╛рдо"],
    "Designation": emp_row["рдкрджрдирд╛рдо"],
    "Memo": punishment_text,
    "PFNumber": emp_row["рдкреА.рдПрдл. рдХреНрд░рдорд╛рдВрдХ"],
    "LetterNo": emp_row["рдкрддреНрд░ рдХреНрд░."],
    "PunishmentDate": order_date.strftime("%d-%m-%Y"),
    "AppealDate": appeal_date.strftime("%d-%m-%Y") if appeal_date else "",
    "AppealMemo": appeal_memo,
    "Remarks": remarks,
    "ReplyStatus": reply_received,
    "OrderNo": f"D-1/{emp_row['рдкрддреНрд░ рдХреНрд░.']}"
}

# Generate Document
def replace_placeholders(doc, ctx):
    for p in doc.paragraphs:
        for key, val in ctx.items():
            if f"[{key}]" in p.text:
                p.text = p.text.replace(f"[{key}]", str(val))
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for key, val in ctx.items():
                    if f"[{key}]" in cell.text:
                        cell.text = cell.text.replace(f"[{key}]", str(val))

if st.button("ЁЯУД Generate SF-11 Punishment Order"):
    template_path = "assets/SF-11 Punishment order temp.docx"
    doc = Document(template_path)
    replace_placeholders(doc, context)
    
    filename = f"SF11_Punishment_{context['PFNumber']}_{context['LetterDate']}"
    output_path = f"/tmp/{filename}.docx"
    doc.save(output_path)

    # Save to register (optional here)
    st.success("тЬЕ Document Generated Successfully!")
    with open(output_path, "rb") as f:
        b64 = base64.b64encode(f.read()).decode()
        href = f'<a href="data:application/octet-stream;base64,{b64}" download="{filename}.docx">тмЗя╕П Download Word File</a>'
        st.markdown(href, unsafe_allow_html=True)

    # PDF conversion
    try:
        pdf_path = output_path.replace(".docx", ".pdf")
        convert(output_path, pdf_path)
        with open(pdf_path, "rb") as f:
            b64 = base64.b64encode(f.read()).decode()
            href = f'<a href="data:application/octet-stream;base64,{b64}" download="{filename}.pdf">тмЗя╕П Download PDF File</a>'
            st.markdown(href, unsafe_allow_html=True)
    except:
        st.warning("тЪая╕П PDF conversion failed or not supported.")
